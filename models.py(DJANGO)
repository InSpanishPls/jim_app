from django.db import models  # Importa el módulo de modelos de Django para definir las estructuras de la base de datos.

# Modelo Usuario
class Usuario(models.Model):
    # Definición de los tipos de usuario posibles.
    TIPO_USUARIO_CHOICES = [
        ('Administrador', 'Administrador'),
        ('Entrenador', 'Entrenador'),
        ('Socio', 'Socio'),
    ]
    
    nombre = models.CharField(max_length=100)  # Nombre del usuario, hasta 100 caracteres.
    apellidos = models.CharField(max_length=100)  # Apellidos del usuario, hasta 100 caracteres.
    email = models.EmailField(unique=True)  # Correo electrónico único para cada usuario.
    fecha_registro = models.DateTimeField(auto_now_add=True)  # Fecha de registro del usuario.
    tipo = models.CharField(max_length=20, choices=TIPO_USUARIO_CHOICES)  # Tipo de usuario con opciones predefinidas.

    def __str__(self):
        return f"{self.nombre} {self.apellidos} ({self.tipo})"  # Representación en string del usuario.

# Modelo Curso
class Curso(models.Model):
    # Definición de los tipos de curso posibles.
    TIPO_CURSO_CHOICES = [
        ('Spinning', 'Spinning'),
        ('Pilates', 'Pilates'),
    ]
    
    titulo = models.CharField(max_length=200)  # Título del curso, hasta 200 caracteres.
    descripcion = models.TextField()  # Descripción detallada del curso.
    tipo_curso = models.CharField(max_length=20, choices=TIPO_CURSO_CHOICES)  # Tipo de curso con opciones predefinidas.
    entrenador = models.ForeignKey(Usuario, on_delete=models.CASCADE, limit_choices_to={'tipo': 'Entrenador'})  # Relación con un usuario que sea entrenador.
    capacidad_maxima = models.PositiveIntegerField()  # Número máximo de participantes permitidos.
    fecha_creacion = models.DateTimeField(auto_now_add=True)  # Fecha de creación del curso.

    def __str__(self):
        return self.titulo  # Representación en string del curso.

# Modelo Matricula
class Matricula(models.Model):
    curso = models.ForeignKey(Curso, on_delete=models.CASCADE)  # Relación con un curso.
    socio = models.ForeignKey(Usuario, on_delete=models.CASCADE, limit_choices_to={'tipo': 'Socio'})  # Relación con un usuario que sea socio.
    fecha_matricula = models.DateTimeField(auto_now_add=True)  # Fecha en que se realizó la matrícula.

    def __str__(self):
        return f"{self.socio.nombre} {self.socio.apellidos} - {self.curso.titulo}"  # Representación en string de la matrícula.

# Modelo Ejercicio
class Ejercicio(models.Model):
    GRUPOS_MUSCULARES = [
        ('Pectorales', 'Pectorales'),
        ('Espalda', 'Espalda'),
        ('Piernas', 'Piernas'),
        ('Brazos', 'Brazos'),
        ('Abdomen', 'Abdomen'),
    ]
    
    nombre = models.CharField(max_length=200)  # Nombre del ejercicio.
    descripcion = models.TextField()  # Descripción detallada del ejercicio.
    grupo_muscular = models.CharField(max_length=100)  # Grupo muscular trabajado en el ejercicio.

    def __str__(self):
        return f"{self.nombre} ({self.grupo_muscular})"  # Representación en string del ejercicio.

# Modelo Valoracion
class Valoracion(models.Model):
    curso = models.ForeignKey(Curso, on_delete=models.CASCADE)  # Relación con un curso.
    socio = models.ForeignKey(Usuario, on_delete=models.CASCADE, limit_choices_to={'tipo': 'Socio'})  # Relación con un usuario que sea socio.
    puntuacion = models.PositiveSmallIntegerField(choices=[(i, i) for i in range(1, 6)])  # Puntuación de 1 a 5.
    comentario = models.TextField(blank=True, null=True)  # Comentario opcional.
    fecha_creacion = models.DateTimeField(auto_now_add=True)  # Fecha en que se realizó la valoración.

    def __str__(self):
        return f"Valoración de {self.socio.nombre} para {self.curso.titulo}: {self.puntuacion}/5"  # Representación en string de la valoración.
